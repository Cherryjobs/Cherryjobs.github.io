<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你曾是少年</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-20T01:23:02.532Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cherryjobs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nand读取指定分区的俩种方式</title>
    <link href="http://yoursite.com/2018/11/19/Linux/flash/nand_read/"/>
    <id>http://yoursite.com/2018/11/19/Linux/flash/nand_read/</id>
    <published>2018-11-19T07:57:00.000Z</published>
    <updated>2018-11-20T01:23:02.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol><li><p>kernel中直接读取具体mtd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mtd/mtd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get_bl</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mtd_info</span> *<span class="title">mtd</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">size_t</span> bytes_read = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> err = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//根据分区名字获取mtd</span></span><br><span class="line">mtd = get_mtd_device_nm(<span class="string">"res"</span>);</span><br><span class="line"><span class="keyword">if</span>(IS_ERR(mtd))</span><br><span class="line"><span class="keyword">return</span> -ENODEV;</span><br><span class="line"><span class="comment">//读取mtd上,偏移0个字节长度,读取长度,实际读取字节数</span></span><br><span class="line">err = mtd_read(mtd, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf), &amp;bytes_read, buf);</span><br><span class="line"><span class="keyword">if</span>(err)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">printk(<span class="string">"%s dat[0]:0x%x, dat[1]:0x%x,  dat[2]:0x%x, dat[3]:0x%x\n"</span>,__func__,buf[<span class="number">0</span>],buf[<span class="number">1</span>],buf[<span class="number">2</span>],buf[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line">put_mtd_device(mtd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">err:</span><br><span class="line"><span class="keyword">return</span> -ENXIO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在uboot中读取,并传递给kernel</p><ul><li><p>2.1 cmd/Makefile</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj-y += get_lcd_value.o</span><br></pre></td></tr></table></figure></li><li><p>2.2 cmd/get_lcd_value.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;common.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;command.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;image.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_get_lcd_value</span><span class="params">(<span class="keyword">cmd_tbl_t</span> *cmdtp, <span class="keyword">int</span> flag, <span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> uImage_head_addr;</span><br><span class="line">uImage_head_addr = simple_strtoul(argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"agrv[1] addr 0x%x\n"</span>,*(<span class="keyword">int</span> *)uImage_head_addr);</span><br><span class="line">buf[<span class="number">0</span>] = ((<span class="keyword">char</span> *)uImage_head_addr)[<span class="number">3</span>] &amp; <span class="number">0x0f</span>;</span><br><span class="line">buf[<span class="number">1</span>] = ((<span class="keyword">char</span> *)uImage_head_addr)[<span class="number">2</span>] &amp; <span class="number">0x0f</span>;</span><br><span class="line">buf[<span class="number">0</span>] |= (buf[<span class="number">1</span>] &lt;&lt; <span class="number">4</span>);</span><br><span class="line">buf[<span class="number">2</span>] = ((<span class="keyword">char</span> *)uImage_head_addr)[<span class="number">1</span>] &amp; <span class="number">0x0f</span>;</span><br><span class="line">buf[<span class="number">3</span>] = ((<span class="keyword">char</span> *)uImage_head_addr)[<span class="number">0</span>] &amp; <span class="number">0x0f</span>;</span><br><span class="line">buf[<span class="number">1</span>] = (buf[<span class="number">3</span>] &lt;&lt; <span class="number">4</span>) | buf[<span class="number">2</span>];</span><br><span class="line">setenv_hex(<span class="string">"loadlcdvalue"</span>, *(<span class="keyword">int</span> *)buf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">U_BOOT_CMD(</span><br><span class="line">get_lcd_value, CONFIG_SYS_MAXARGS, <span class="number">0</span>, do_get_lcd_value,</span><br><span class="line"><span class="string">"Get lcd value !\n"</span>,</span><br><span class="line"><span class="string">"Usage: Get lcd value\n"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>2.3 include/configs/mx6dl_xxx_common.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_EXTRA_ENV_SETTINGS \</span></span><br><span class="line">CONFIG_MFG_ENV_SETTINGS \</span><br><span class="line"><span class="string">"loadsz="</span> KN_PART_SZ <span class="string">"\0"</span> \</span><br><span class="line"><span class="string">"loadlogo=nand read $&#123;loadaddr&#125; "</span> MAIN_LOGO_PART_ADDR <span class="string">" "</span> UBOOT_HEAD_SZ <span class="string">"; get_img_size $&#123;loadaddr&#125;; nand read "</span> LOGO_LOAD_ADDR <span class="string">" "</span> MAIN_LOGO_PART_ADDR <span class="string">" $&#123;loadsz&#125;; "</span> \</span><br><span class="line"><span class="string">"if imxtract "</span> LOGO_LOAD_ADDR <span class="string">" 0 "</span> FB_ADDR <span class="string">"; then "</span> \</span><br><span class="line"><span class="string">"; "</span> \</span><br><span class="line"><span class="string">"else "</span> \</span><br><span class="line"><span class="string">"nand read $&#123;loadaddr&#125; "</span> BAK_LOGO_PART_ADDR <span class="string">" "</span> UBOOT_HEAD_SZ <span class="string">"; get_img_size $&#123;loadaddr&#125;; nand read "</span> LOGO_LOAD_ADDR <span class="string">" "</span> BAK_LOGO_PART_ADDR <span class="string">" $&#123;loadsz&#125;; "</span> \</span><br><span class="line"><span class="string">"nand erase "</span> MAIN_LOGO_PART_ADDR <span class="string">" "</span> UBOOT_HEAD_SZ <span class="string">"; nand write "</span> LOGO_LOAD_ADDR <span class="string">" "</span> MAIN_LOGO_PART_ADDR <span class="string">" $&#123;loadsz&#125;; "</span> \</span><br><span class="line"><span class="string">"imxtract "</span> LOGO_LOAD_ADDR <span class="string">" 0 "</span> FB_ADDR <span class="string">"; "</span> \</span><br><span class="line"><span class="string">"fi\0"</span> \</span><br><span class="line"><span class="string">"rootfs=ubi.mtd="</span> ROOTFS_PART_NUM <span class="string">" root=ubi0:rootfs rootfstype=ubifs\0"</span> \</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加testlcd命令</span></span><br><span class="line"><span class="comment">//从FLAG_PART_ADDR读取长度FLAG_SZ数据,到ram的loadaddr地址;运行get_lcd_value命令</span></span><br><span class="line"><span class="string">"testlcd=nand read $&#123;loadaddr&#125; "</span> FLAG_PART_ADDR <span class="string">" "</span> FLAG_SZ <span class="string">"; get_lcd_value $&#123;loadaddr&#125;; "</span> <span class="string">"\0"</span> \</span><br><span class="line"></span><br><span class="line"><span class="comment">//将lcd_light_value作为bootarg传给kernel</span></span><br><span class="line"><span class="string">"bootargs_set=setenv bootargs console="</span> CONFIG_CONSOLE_DEV <span class="string">","</span> BAUDRATE <span class="string">" $&#123;rootfs&#125; rootwait ro uboot_version="</span> PLAIN_VERSION <span class="string">" maxcpus="</span> USE_CPUS <span class="string">" lpj="</span> DEF_LPJ <span class="string">" loglevel="</span> LOG_LEVEL <span class="string">" "</span> CONFIG_MFG_NAND_PARTITION <span class="string">" lcd_light_value=$&#123;loadlcdvalue&#125; \0"</span> \</span><br><span class="line"><span class="comment">//运行 testlcd</span></span><br><span class="line"><span class="string">"bootcmd=run testlcd; run bootargs_set; run loadlogo; nand read $&#123;loadaddr&#125; "</span> MAIN_KN_PART_ADDR <span class="string">" "</span> UBOOT_HEAD_SZ <span class="string">"; "</span> GET_KERNEL_SIZE <span class="string">" $&#123;loadaddr&#125;; nand read $&#123;loadaddr&#125; "</span> MAIN_KN_PART_ADDR <span class="string">" $&#123;loadsz&#125;;"</span> \</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"bootm $&#123;loadaddr&#125;\0"</span> \</span><br><span class="line"><span class="string">"bootcmd_bak=run bootargs_set; run loadlogo; nand read $&#123;loadaddr&#125; "</span> BAK_KN_PART_ADDR <span class="string">" "</span> UBOOT_HEAD_SZ <span class="string">"; "</span> GET_KERNEL_SIZE <span class="string">" $&#123;loadaddr&#125;; nand read $&#123;loadaddr&#125; "</span> BAK_KN_PART_ADDR <span class="string">" $&#123;loadsz&#125;;"</span> \</span><br><span class="line"><span class="string">"bootm $&#123;loadaddr&#125;\0"</span> \</span><br><span class="line"><span class="string">"restore_image=nand read $&#123;loadaddr&#125; "</span> BAK_KN_PART_ADDR <span class="string">" "</span> UBOOT_HEAD_SZ <span class="string">"; "</span> GET_KERNEL_SIZE <span class="string">" $&#123;loadaddr&#125;; nand read $&#123;loadaddr&#125; "</span> BAK_KN_PART_ADDR <span class="string">" $&#123;loadsz&#125;;"</span> \</span><br><span class="line"><span class="string">"nand erase "</span> MAIN_KN_PART_ADDR <span class="string">" "</span> KN_PART_SZ <span class="string">"; nand write $&#123;loadaddr&#125; "</span> MAIN_KN_PART_ADDR <span class="string">" $&#123;loadsz&#125;\0"</span> \</span><br><span class="line"><span class="string">"loadflag=nand read "</span> BOOTFLAG_LOADADDR <span class="string">" "</span> FLAG_PART_ADDR <span class="string">" "</span> FLAG_SZ <span class="string">"\0"</span> \</span><br><span class="line"><span class="string">"minirtfs_set1=setenv rootfs root=/dev/mtdblock"</span> MNRF1_PART_NUM <span class="string">" rootfstype=squashfs\0"</span> \</span><br><span class="line"><span class="string">"minirtfs_set2=setenv rootfs root=/dev/mtdblock"</span> MNRF2_PART_NUM <span class="string">" rootfstype=squashfs\0"</span></span><br></pre></td></tr></table></figure></li><li><p>2.4 kernel中的修改<br>static unsigned int lcdvalue;<br>static int __init lcdvalue_setup(char *num)<br>{<br>  char buf[32];<br>  strncpy(buf,num,8);<br>  lcdvalue = simple_strtol(num, NULL, 16);<br>  printk(“[TEST] lcdvalue = %s\n”,num);<br>  printk(“[TEST] lcdvalue = %d\n”,lcdvalue);<br>}</p><p>//在bootarg中取出”lcd_light_value=”字串后的数据,并调用lcdvalue_setup函数处理<br>__setup(“lcd_light_value=”, lcdvalue_setup);</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;kernel中直接读取具体mtd&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="flash" scheme="http://yoursite.com/categories/Linux/flash/"/>
    
    
  </entry>
  
  <entry>
    <title>你曾是少年</title>
    <link href="http://yoursite.com/2018/11/13/%E4%BD%A0%E6%9B%BE%E6%98%AF%E5%B0%91%E5%B9%B4/"/>
    <id>http://yoursite.com/2018/11/13/你曾是少年/</id>
    <published>2018-11-13T09:40:47.633Z</published>
    <updated>2018-11-13T09:40:47.605Z</updated>
    
    <content type="html"><![CDATA[<p>#details<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">有些时候你怀念从前日子</span><br><span class="line">可天真离开时你却没说一个字</span><br><span class="line">你只是挥一挥手像扔掉废纸</span><br><span class="line">说是人生必经的事</span><br><span class="line">酒喝到七分却又感觉怅然若失</span><br><span class="line">镜子里面像看到人生终点</span><br><span class="line">或许再过上几年</span><br><span class="line">你也有张虚伪的脸</span><br><span class="line">难道我们是为了这样才来到这世上</span><br><span class="line">这问题来不及想</span><br><span class="line">每一天一年总是匆匆忙忙</span><br><span class="line"></span><br><span class="line">你我来自湖北四川广西宁夏河南</span><br><span class="line">山东贵州云南的小镇乡村</span><br><span class="line">曾经发誓要做了不起的人</span><br><span class="line">却在北京上海广州深圳</span><br><span class="line">某天夜半忽然醒来</span><br><span class="line">站在寂寞的阳台</span><br><span class="line">只想从这无边的寂寞中逃出来</span><br><span class="line"></span><br><span class="line">许多年前你有一双清澈的双眼</span><br><span class="line">奔跑起来像是一道春天的闪电</span><br><span class="line">想看遍这世界去最遥远的远方</span><br><span class="line">感觉有双翅膀能飞越高山和海洋</span><br><span class="line">许多年前你曾是个朴素的少年</span><br><span class="line">爱上一个人就不怕付出自己一生</span><br><span class="line">相信爱会永恒</span><br><span class="line">相信每个陌生人</span><br><span class="line">相信你会成为最想成为的人</span><br><span class="line"></span><br><span class="line">习惯说谎就是变得成熟了吗</span><br><span class="line">有一套房子之后才能去爱别人吗</span><br><span class="line">总是以为成功之后就能抚平伤痕</span><br><span class="line">欲望边埋着错过的人</span><br><span class="line">当青春耗尽只剩面目可憎</span><br><span class="line"></span><br><span class="line">你我来自湖北四川广西宁夏</span><br><span class="line">河南山东贵州云南的小镇乡村</span><br><span class="line">曾经发誓要做了不起的人</span><br><span class="line">却在北京上海广州深圳</span><br><span class="line">某天夜半忽然醒来像被命运叫醒了</span><br><span class="line">它说你不能就这样过完一生</span><br><span class="line"></span><br><span class="line">许多年前你有一双清澈的双眼</span><br><span class="line">奔跑起来像是一道春天的闪电</span><br><span class="line">想看遍这世界去最遥远的远方</span><br><span class="line">感觉有双翅膀能飞越高山和海洋</span><br><span class="line">许多年前我曾是个朴素的少年</span><br><span class="line">爱上一个人就不怕付出自己一生</span><br><span class="line">相信爱会永恒</span><br><span class="line">相信每个陌生人</span><br><span class="line">当我和世界初相见</span><br><span class="line">当我曾经是少年</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#details&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>i2c app</title>
    <link href="http://yoursite.com/2018/11/12/Linux/i2c/app/"/>
    <id>http://yoursite.com/2018/11/12/Linux/i2c/app/</id>
    <published>2018-11-12T02:48:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>需要构建i2c_rdwr_ioctl_data，通过ioctl(fd,I2C_RDWR,&amp;packets)进行下发。<br>ps: 此时ioctl会返回-1，但是属于正常情况(参考i2c-tools源码)。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">s32 <span class="title">i2c_smbus_access</span><span class="params">(<span class="keyword">int</span> file, <span class="keyword">char</span> read_write, __u8 command,</span></span></span><br><span class="line"><span class="function"><span class="params">       <span class="keyword">int</span> size, <span class="keyword">union</span> i2c_smbus_data *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_smbus_ioctl_data</span> <span class="title">args</span>;</span></span><br><span class="line">__s32 err;</span><br><span class="line"></span><br><span class="line">args.read_write = read_write;</span><br><span class="line">args.command = command;</span><br><span class="line">args.size = size;</span><br><span class="line">args.data = data;</span><br><span class="line"></span><br><span class="line">err = ioctl(file, I2C_SMBUS, &amp;args);</span><br><span class="line"><span class="keyword">if</span> (err == <span class="number">-1</span>)</span><br><span class="line">err = -errno;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/i2c-dev.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret, fd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>[2];</span></span><br><span class="line">u8 val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">"/dev/i2c-3"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"open i2c-3 controller failed\n"</span>);</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先设置要读取的寄存器地址</span></span><br><span class="line">val = <span class="number">0x01</span>;<span class="comment">// reg addr</span></span><br><span class="line">msg[<span class="number">0</span>].addr = <span class="number">0x2c</span>;<span class="comment">// i2c device addr</span></span><br><span class="line">msg[<span class="number">0</span>].flags = <span class="number">0</span>;<span class="comment">// write</span></span><br><span class="line">msg[<span class="number">0</span>].len = <span class="number">1</span>;</span><br><span class="line">msg[<span class="number">0</span>].buf[<span class="number">0</span>] = &amp;val;</span><br><span class="line"><span class="comment">// 再读取len个数据到buf中</span></span><br><span class="line">msg[<span class="number">1</span>].addr = <span class="number">0x2c</span>;<span class="comment">// i2c device addr</span></span><br><span class="line">msg[<span class="number">1</span>].flags = <span class="number">1</span>;<span class="comment">// read</span></span><br><span class="line">msg[<span class="number">1</span>].len = <span class="number">1</span>;</span><br><span class="line">msg[<span class="number">1</span>].buf[<span class="number">0</span>] = &amp;val;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下发数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_rdwr_ioctl_data</span> <span class="title">packets</span>;</span></span><br><span class="line">packets.msgs= msg;</span><br><span class="line">packets.nmsgs= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">ret = ioctl(fd,I2C_RDWR,&amp;packets);</span><br><span class="line"><span class="keyword">if</span> ((ret&lt;<span class="number">0</span>) &amp;&amp; (ret!=<span class="number">-1</span>)) &#123;<span class="comment">// -1是正常情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[I2C] ioctl failed ret:%d\n"</span>,ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[I2C] read result is %x\n"</span>,msg[<span class="number">1</span>].buf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="底层对应code分析"><a href="#底层对应code分析" class="headerlink" title="底层对应code分析"></a>底层对应code分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">i2cdev_fops</span> = &#123;</span></span><br><span class="line">.owner= THIS_MODULE,</span><br><span class="line">.unlocked_ioctl= i2cdev_ioctl,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">i2cdev_ioctl</span><span class="params">(struct file *file, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> I2C_RDWR:</span><br><span class="line"><span class="keyword">return</span> i2cdev_ioctl_rdrw(client, arg);</span><br><span class="line"><span class="comment">// 先要知道有几个msg</span></span><br><span class="line"><span class="keyword">if</span> (copy_from_user(&amp;rdwr_arg,</span><br><span class="line">   (struct i2c_rdwr_ioctl_data __user *)arg,</span><br><span class="line">   <span class="keyword">sizeof</span>(rdwr_arg)))</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line"><span class="comment">// 再将这几个msg dump到rdwr_pa</span></span><br><span class="line">rdwr_pa = memdup_user(rdwr_arg.msgs,</span><br><span class="line">  rdwr_arg.nmsgs * <span class="keyword">sizeof</span>(struct i2c_msg));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建msg</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rdwr_arg.nmsgs; i++) &#123;</span><br><span class="line">data_ptrs[i] = (u8 __user *)rdwr_pa[i].buf;</span><br><span class="line">rdwr_pa[i].buf = memdup_user(data_ptrs[i], rdwr_pa[i].len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送msg</span></span><br><span class="line">res = i2c_transfer(client-&gt;adapter, rdwr_pa, rdwr_arg.nmsgs);</span><br><span class="line"><span class="comment">// cp数据到userspace</span></span><br><span class="line"><span class="keyword">while</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (res &gt;= <span class="number">0</span> &amp;&amp; (rdwr_pa[i].flags &amp; I2C_M_RD)) &#123;</span><br><span class="line"><span class="keyword">if</span> (copy_to_user(data_ptrs[i], rdwr_pa[i].buf,</span><br><span class="line"> rdwr_pa[i].len))</span><br><span class="line">res = -EFAULT;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;需要构建i2c_rdwr_ioctl_data，通过ioctl(fd,I2C_RDWR,&amp;amp;packets)进行下发。&lt;br&gt;ps: 此时ioctl会返回-1，但是属于正常情况(参考i2c-tools源码)。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;function&quot;&gt;s32 &lt;span class=&quot;title&quot;&gt;i2c_smbus_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; file, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; read_write, __u8 command,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;		       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size, &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; i2c_smbus_data *data)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;i2c_smbus_ioctl_data&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;args&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__s32 err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	args.read_write = read_write;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	args.command = command;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	args.size = size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	args.data = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	err = ioctl(file, I2C_SMBUS, &amp;amp;args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		err = -errno;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="i2c" scheme="http://yoursite.com/categories/Linux/i2c/"/>
    
    
  </entry>
  
  <entry>
    <title>probe</title>
    <link href="http://yoursite.com/2018/06/08/Linux/bus-device-driver/platform/probe/"/>
    <id>http://yoursite.com/2018/06/08/Linux/bus-device-driver/platform/probe/</id>
    <published>2018-06-08T06:13:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="probe"><a href="#probe" class="headerlink" title="probe"></a>probe</h1><p>可以看到调用的device_driver-&gt;probe而不是platform_driver-&gt;probe<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">driver_probe_device</span><span class="params">(struct device_driver *drv, struct device *dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ret = really_probe(dev, drv);</span><br><span class="line">dev-&gt;driver = drv;<span class="comment">// 这句话也是关键，因为drv-&gt;probe实际是platform_drv_probe，而在platform_drv_probe中要用到dev-&gt;driver</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dev-&gt;bus-&gt;probe) &#123;</span><br><span class="line">ret = dev-&gt;bus-&gt;probe(dev);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (drv-&gt;probe) &#123;<span class="comment">// 是device_driver-&gt;probe，而不是platform_driver-&gt;probe，所以这里涉及device_driver和platform_driver的联系</span></span><br><span class="line">ret = drv-&gt;probe(dev);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="platform-driver和device-driver的联系"><a href="#platform-driver和device-driver的联系" class="headerlink" title="platform_driver和device_driver的联系"></a>platform_driver和device_driver的联系</h1><p>device_driver-&gt;probe也是platform_driver-&gt;probe<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">platform_driver_register</span><span class="params">(struct platform_driver *drv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">drv-&gt;driver.bus = &amp;platform_bus_type;</span><br><span class="line"><span class="comment">// 这里将link platform_driver和device_driver</span></span><br><span class="line"><span class="keyword">if</span> (drv-&gt;probe)<span class="comment">// platform_driver</span></span><br><span class="line">drv-&gt;driver.probe = platform_drv_probe;<span class="comment">// device_driver</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> driver_register(&amp;drv-&gt;driver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">platform_drv_probe</span><span class="params">(struct device *_dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> *<span class="title">drv</span> = <span class="title">to_platform_driver</span>(_<span class="title">dev</span>-&gt;<span class="title">driver</span>);</span><span class="comment">// really_probe中设置dev-&gt;driver = drv;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_device</span> *<span class="title">dev</span> = <span class="title">to_platform_device</span>(_<span class="title">dev</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> drv-&gt;probe(dev);<span class="comment">// platform_driver-&gt;probe</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;probe&quot;&gt;&lt;a href=&quot;#probe&quot; class=&quot;headerlink&quot; title=&quot;probe&quot;&gt;&lt;/a&gt;probe&lt;/h1&gt;&lt;p&gt;可以看到调用的device_driver-&amp;gt;probe而不是platform_driver-&amp;gt;probe&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;driver_probe_device&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(struct device_driver *drv, struct device *dev)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret = really_probe(dev, drv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dev-&amp;gt;driver = drv;	&lt;span class=&quot;comment&quot;&gt;// 这句话也是关键，因为drv-&amp;gt;probe实际是platform_drv_probe，而在platform_drv_probe中要用到dev-&amp;gt;driver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dev-&amp;gt;bus-&amp;gt;probe) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ret = dev-&amp;gt;bus-&amp;gt;probe(dev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (drv-&amp;gt;probe) &amp;#123;	&lt;span class=&quot;comment&quot;&gt;// 是device_driver-&amp;gt;probe，而不是platform_driver-&amp;gt;probe，所以这里涉及device_driver和platform_driver的联系&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ret = drv-&amp;gt;probe(dev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="platform" scheme="http://yoursite.com/categories/Linux/platform/"/>
    
    
  </entry>
  
  <entry>
    <title>dev name</title>
    <link href="http://yoursite.com/2018/06/07/Linux/bus-device-driver/platform/dev_name/"/>
    <id>http://yoursite.com/2018/06/07/Linux/bus-device-driver/platform/dev_name/</id>
    <published>2018-06-07T07:22:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">platform_add_devices</span><span class="params">(struct platform_device **devs, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">ret = platform_device_register(devs[i]);</span><br><span class="line"><span class="keyword">return</span> platform_device_add(pdev);</span><br><span class="line"><span class="comment">// set name</span></span><br><span class="line"><span class="keyword">if</span> (pdev-&gt;id != <span class="number">-1</span>)<span class="comment">// </span></span><br><span class="line">dev_set_name(&amp;pdev-&gt;dev, <span class="string">"%s.%d"</span>, pdev-&gt;name,  pdev-&gt;id);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dev_set_name(&amp;pdev-&gt;dev, <span class="string">"%s"</span>, pdev-&gt;name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="case-id-1"><a href="#case-id-1" class="headerlink" title="case: id = -1"></a>case: id = -1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_device</span> <span class="title">s3c_device_ohci</span> = &#123;</span></span><br><span class="line">.name  = <span class="string">"s3c2410-ohci"</span>,</span><br><span class="line">.id  = <span class="number">-1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>则dev name为”s3c2410-ohci”.</p><h2 id="case-id-1-1"><a href="#case-id-1-1" class="headerlink" title="case: id != -1"></a>case: id != -1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_device</span> <span class="title">mini2440_led1</span> = &#123;</span></span><br><span class="line">.name= <span class="string">"s3c24xx_led"</span>,</span><br><span class="line">.id= <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>则dev name为”s3c24xx_led.1”.</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;platform_add_devices&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(struct platform_device **devs, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; num; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ret = platform_device_register(devs[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; platform_device_add(pdev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// set name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pdev-&amp;gt;id != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)	&lt;span class=&quot;comment&quot;&gt;// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					dev_set_name(&amp;amp;pdev-&amp;gt;dev, &lt;span class=&quot;string&quot;&gt;&quot;%s.%d&quot;&lt;/span&gt;, pdev-&amp;gt;name,  pdev-&amp;gt;id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					dev_set_name(&amp;amp;pdev-&amp;gt;dev, &lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, pdev-&amp;gt;name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="platform" scheme="http://yoursite.com/categories/Linux/platform/"/>
    
    
  </entry>
  
  <entry>
    <title>match</title>
    <link href="http://yoursite.com/2018/06/07/Linux/bus-device-driver/platform/match/"/>
    <id>http://yoursite.com/2018/06/07/Linux/bus-device-driver/platform/match/</id>
    <published>2018-06-07T07:22:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="match"><a href="#match" class="headerlink" title="match"></a>match</h1><p>可以看到match有三种方式<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">platform_match</span><span class="params">(struct device *dev, struct device_driver *drv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_device</span> *<span class="title">pdev</span> = <span class="title">to_platform_device</span>(<span class="title">dev</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> *<span class="title">pdrv</span> = <span class="title">to_platform_driver</span>(<span class="title">drv</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Attempt an OF style match first */</span></span><br><span class="line"><span class="keyword">if</span> (of_driver_match_device(dev, drv))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Then try to match against the id table */</span></span><br><span class="line"><span class="keyword">if</span> (pdrv-&gt;id_table)</span><br><span class="line"><span class="keyword">return</span> platform_match_id(pdrv-&gt;id_table, pdev) != <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* fall-back to driver name match */</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">strcmp</span>(pdev-&gt;name, drv-&gt;name) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="方式1：of-driver-match-device"><a href="#方式1：of-driver-match-device" class="headerlink" title="方式1：of_driver_match_device"></a>方式1：of_driver_match_device</h2><p>dts中的node.xxx字段和driver.of_match_table.xxx字段进行match<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">of_driver_match_device</span><span class="params">(struct device *dev,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">const</span> struct device_driver *drv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> of_match_device(drv-&gt;of_match_table, dev) != <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> of_match_node(matches, dev-&gt;of_node);</span><br><span class="line"><span class="keyword">while</span> (matches-&gt;name[<span class="number">0</span>] || matches-&gt;type[<span class="number">0</span>] || matches-&gt;compatible[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> match = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (matches-&gt;name[<span class="number">0</span>])</span><br><span class="line">match &amp;= node-&gt;name</span><br><span class="line">&amp;&amp; !<span class="built_in">strcmp</span>(matches-&gt;name, node-&gt;name);</span><br><span class="line"><span class="keyword">if</span> (matches-&gt;type[<span class="number">0</span>])</span><br><span class="line">match &amp;= node-&gt;type</span><br><span class="line">&amp;&amp; !<span class="built_in">strcmp</span>(matches-&gt;type, node-&gt;type);</span><br><span class="line"><span class="keyword">if</span> (matches-&gt;compatible[<span class="number">0</span>])</span><br><span class="line">match &amp;= of_device_is_compatible(node,</span><br><span class="line">matches-&gt;compatible);</span><br><span class="line"><span class="keyword">if</span> (match)</span><br><span class="line"><span class="keyword">return</span> matches;</span><br><span class="line">matches++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>xxx可以是name/type/compatible，但一般compatible居多，分析compatible<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> of_compat_cmp(s1, s2, l)strcasecmp((s1), (s2))<span class="comment">// 最终还是strcmp</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_device_is_compatible</span><span class="params">(<span class="keyword">const</span> struct device_node *device,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> *compat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cp;</span><br><span class="line"><span class="keyword">int</span> cplen, l;</span><br><span class="line"></span><br><span class="line">cp = of_get_property(device, <span class="string">"compatible"</span>, &amp;cplen);</span><br><span class="line"><span class="keyword">while</span> (cplen &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (of_compat_cmp(cp, compat, <span class="built_in">strlen</span>(compat)) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">l = <span class="built_in">strlen</span>(cp) + <span class="number">1</span>;</span><br><span class="line">cp += l;</span><br><span class="line">cplen -= l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>device：<br>dts中设置<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DMA0: dma0@<span class="number">400100100</span> &#123;</span><br><span class="line">compatible = <span class="string">"ibm,dma-440spe"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>driver：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">ppc440spe_adma_of_match</span>[] __<span class="title">devinitconst</span> = &#123;</span></span><br><span class="line">&#123; .compatible= <span class="string">"ibm,dma-440spe"</span>, &#125;,</span><br><span class="line">&#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> <span class="title">ppc440spe_adma_driver</span> = &#123;</span></span><br><span class="line">.driver = &#123;</span><br><span class="line">.of_match_table = ppc440spe_adma_of_match,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="方式2：platform-match-id"><a href="#方式2：platform-match-id" class="headerlink" title="方式2：platform_match_id"></a>方式2：platform_match_id</h2><p>platform_device.name和id_table.name进行match<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_device_id</span> *<span class="title">id_table</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">const</span> struct platform_device_id *<span class="title">platform_match_id</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> struct platform_device_id *id,</span></span></span><br><span class="line"><span class="function"><span class="params">struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (id-&gt;name[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(pdev-&gt;name, id-&gt;name) == <span class="number">0</span>) &#123;</span><br><span class="line">pdev-&gt;id_entry = id;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">id++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式3"><a href="#方式3" class="headerlink" title="方式3"></a>方式3</h2><p>以前最常用的方式，即对比platform_device.name和platform_driver.driver.name<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> <span class="title">acc_con_driver</span> = &#123;</span></span><br><span class="line">.driver= &#123;</span><br><span class="line">.name= <span class="string">"acc_con"</span>,</span><br><span class="line">.owner= THIS_MODULE,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">platform_match</span><span class="params">(struct device *dev, struct device_driver *drv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_device</span> *<span class="title">pdev</span> = <span class="title">to_platform_device</span>(<span class="title">dev</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> *<span class="title">pdrv</span> = <span class="title">to_platform_driver</span>(<span class="title">drv</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">strcmp</span>(pdev-&gt;name, drv-&gt;name) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;match&quot;&gt;&lt;a href=&quot;#match&quot; class=&quot;headerlink&quot; title=&quot;match&quot;&gt;&lt;/a&gt;match&lt;/h1&gt;&lt;p&gt;可以看到match有三种方式&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;platform_match&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(struct device *dev, struct device_driver *drv)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;platform_device&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;pdev&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;to_platform_device&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;dev&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;platform_driver&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;pdrv&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;to_platform_driver&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;drv&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* Attempt an OF style match first */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (of_driver_match_device(dev, drv))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* Then try to match against the id table */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pdrv-&amp;gt;id_table)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; platform_match_id(pdrv-&amp;gt;id_table, pdev) != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* fall-back to driver name match */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(pdev-&amp;gt;name, drv-&amp;gt;name) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="platform" scheme="http://yoursite.com/categories/Linux/platform/"/>
    
    
  </entry>
  
  <entry>
    <title>register platform device</title>
    <link href="http://yoursite.com/2018/06/07/Linux/bus-device-driver/platform/register_device/"/>
    <id>http://yoursite.com/2018/06/07/Linux/bus-device-driver/platform/register_device/</id>
    <published>2018-06-07T07:22:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="add-device"><a href="#add-device" class="headerlink" title="add device"></a>add device</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function">init <span class="title">mini2440_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">platform_add_devices(mini2440_devices, ARRAY_SIZE(mini2440_devices));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">platform_add_devices</span><span class="params">(struct platform_device **devs, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">ret = platform_device_register(devs[i]);</span><br><span class="line"><span class="keyword">return</span> platform_device_add(pdev);</span><br><span class="line">pdev-&gt;dev.bus = &amp;platform_bus_type;<span class="comment">// FIXME</span></span><br><span class="line"><span class="comment">// set name</span></span><br><span class="line"><span class="keyword">if</span> (pdev-&gt;id != <span class="number">-1</span>)<span class="comment">// </span></span><br><span class="line">dev_set_name(&amp;pdev-&gt;dev, <span class="string">"%s.%d"</span>, pdev-&gt;name,  pdev-&gt;id);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dev_set_name(&amp;pdev-&gt;dev, <span class="string">"%s"</span>, pdev-&gt;name);</span><br><span class="line"></span><br><span class="line">ret = device_add(&amp;pdev-&gt;dev);</span><br><span class="line">bus_probe_device(dev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bus-probe-device"><a href="#bus-probe-device" class="headerlink" title="bus_probe_device"></a>bus_probe_device</h2><p>增加一个device时会对platform bus上的所有driver，都执行__device_attach<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bus_probe_device</span><span class="params">(struct device *dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bus_type</span> *<span class="title">bus</span> = <span class="title">dev</span>-&gt;<span class="title">bus</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bus &amp;&amp; bus-&gt;p-&gt;drivers_autoprobe)</span><br><span class="line">ret = device_attach(dev);</span><br><span class="line">ret = bus_for_each_drv(dev-&gt;bus, <span class="literal">NULL</span>, dev, __device_attach);</span><br><span class="line"><span class="comment">// 遍历platform bus上的所有driver，都执行fn()</span></span><br><span class="line">klist_iter_init_node(&amp;bus-&gt;p-&gt;klist_drivers, &amp;i,</span><br><span class="line">start ? &amp;start-&gt;p-&gt;knode_bus : <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">while</span> ((drv = next_driver(&amp;i)) &amp;&amp; !error)</span><br><span class="line">error = fn(drv, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="device-attach"><a href="#device-attach" class="headerlink" title="__device_attach"></a>__device_attach</h3><p>先match，match成功则probe<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __device_attach(struct device_driver *drv, <span class="keyword">void</span> *data)</span><br><span class="line">&#123;</span><br><span class="line">driver_match_device(drv, dev);</span><br><span class="line"><span class="keyword">return</span> drv-&gt;bus-&gt;match ? drv-&gt;bus-&gt;match(dev, drv) : <span class="number">1</span>;<span class="comment">// platform_match</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> driver_probe_device(drv, dev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;add-device&quot;&gt;&lt;a href=&quot;#add-device&quot; class=&quot;headerlink&quot; title=&quot;add device&quot;&gt;&lt;/a&gt;add device&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; __&lt;span class=&quot;function&quot;&gt;init &lt;span class=&quot;title&quot;&gt;mini2440_init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	platform_add_devices(mini2440_devices, ARRAY_SIZE(mini2440_devices));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="platform" scheme="http://yoursite.com/categories/Linux/platform/"/>
    
    
  </entry>
  
  <entry>
    <title>complete_path例子</title>
    <link href="http://yoursite.com/2018/06/05/Linux/asoc/dapm/complete-path%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2018/06/05/Linux/asoc/dapm/complete-path例子/</id>
    <published>2018-06-05T03:36:48.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h1><a href="/2018/03/22/Linux/asoc/dapm/complete-path/" title="complete-path">complete-path</a>可以知道：<br>1. snd_soc_dapm_dac/ snd_soc_dapm_aif_in/ snd_soc_dapm_input/<br>snd_soc_dapm_vmid/ snd_soc_dapm_mic/ snd_soc_dapm_line都属于input_ep<br>2. snd_soc_dapm_adc/ snd_soc_dapm_aif_out/ snd_soc_dapm_output/<br>snd_soc_dapm_hp/ snd_soc_dapm_spk/ snd_soc_dapm_line都属于output_ep<br><a id="more"></a><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="input-ep"><a href="#input-ep" class="headerlink" title="input_ep"></a>input_ep</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SND_SOC_DAPM_INPUT(wname) \</span></span><br><span class="line">&#123;.id = snd_soc_dapm_input, .name = wname, .kcontrol_news = <span class="literal">NULL</span>, \</span><br><span class="line">.num_kcontrols = <span class="number">0</span>, .reg = SND_SOC_NOPM &#125;</span><br></pre></td></tr></table></figure><h2 id="output-ep"><a href="#output-ep" class="headerlink" title="output_ep"></a>output_ep</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SND_SOC_DAPM_ADC(wname, stname, wreg, wshift, winvert) \</span></span><br><span class="line">&#123;.id = snd_soc_dapm_adc, .name = wname, .sname = stname, .reg = wreg, \</span><br><span class="line">.shift = wshift, .invert = winvert&#125;</span><br></pre></td></tr></table></figure><h2 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">snd_soc_dapm_widget</span> <span class="title">wm8960_dapm_widgets</span>[] = &#123;</span></span><br><span class="line">SND_SOC_DAPM_INPUT(<span class="string">"LINPUT1"</span>),</span><br><span class="line">SND_SOC_DAPM_ADC(<span class="string">"Left ADC"</span>, <span class="string">"Capture"</span>, WM8960_POWER1, <span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><blockquote><p>“sink”, “control”, “source”</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">snd_soc_dapm_route</span> <span class="title">audio_paths</span>[] = &#123;</span></span><br><span class="line">&#123; <span class="string">"Left Input Mixer"</span>, <span class="literal">NULL</span>, <span class="string">"LINPUT1"</span>, &#125;,</span><br><span class="line">&#123; <span class="string">"Left ADC"</span>, <span class="literal">NULL</span>, <span class="string">"Left Input Mixer"</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以：<br>LINPUT1 -&gt; Left Input Mixer -&gt; Left ADC就组成了一条complate path。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;导言&quot;&gt;&lt;a href=&quot;#导言&quot; class=&quot;headerlink&quot; title=&quot;导言&quot;&gt;&lt;/a&gt;导言&lt;/h1&gt;&lt;a href=&quot;/2018/03/22/Linux/asoc/dapm/complete-path/&quot; title=&quot;complete-path&quot;&gt;complete-path&lt;/a&gt;可以知道：&lt;br&gt;1. snd_soc_dapm_dac/ snd_soc_dapm_aif_in/ snd_soc_dapm_input/&lt;br&gt;snd_soc_dapm_vmid/ snd_soc_dapm_mic/ snd_soc_dapm_line都属于input_ep&lt;br&gt;2. snd_soc_dapm_adc/ snd_soc_dapm_aif_out/ snd_soc_dapm_output/&lt;br&gt;snd_soc_dapm_hp/ snd_soc_dapm_spk/ snd_soc_dapm_line都属于output_ep&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="asoc" scheme="http://yoursite.com/categories/Linux/asoc/"/>
    
      <category term="dapm" scheme="http://yoursite.com/categories/Linux/asoc/dapm/"/>
    
    
  </entry>
  
  <entry>
    <title>power</title>
    <link href="http://yoursite.com/2018/06/04/Linux/intel/crl/power/"/>
    <id>http://yoursite.com/2018/06/04/Linux/intel/crl/power/</id>
    <published>2018-06-04T11:39:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">crl_power_seq_entity</span> <span class="title">ds90ub940_power_items</span>[] = &#123;</span></span><br><span class="line">&#123;</span><br><span class="line">.type = CRL_POWER_ETY_GPIO_FROM_PDATA,</span><br><span class="line">.val = <span class="number">1</span>,</span><br><span class="line">.undo_val = <span class="number">1</span>, <span class="comment">// Keep xshutdown HIGH all the time. (normally is 0)</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">crl_sensor_configuration</span> <span class="title">ds90ub940_crl_configuration</span> = &#123;</span></span><br><span class="line">.power_items = ARRAY_SIZE(ds90ub940_power_items),</span><br><span class="line">.power_entities = ds90ub940_power_items,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">crlmodule_sensors</span> <span class="title">supported_sensors</span>[] = &#123;</span></span><br><span class="line">&#123; <span class="string">"DS90UB940-1"</span>, <span class="string">"ds90ub940"</span>, &amp;ds90ub940_crl_configuration &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="runtime-resume"><a href="#runtime-resume" class="headerlink" title="runtime_resume"></a>runtime_resume</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dev_pm_ops</span> <span class="title">crlmodule_pm_ops</span> = &#123;</span></span><br><span class="line">.runtime_suspend = crlmodule_runtime_suspend,</span><br><span class="line">.runtime_resume = crlmodule_runtime_resume,</span><br><span class="line">.suspend= crlmodule_suspend,</span><br><span class="line">.resume= crlmodule_resume,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">crlmodule_i2c_driver</span> = &#123;</span></span><br><span class="line">.driver= &#123;</span><br><span class="line">.name = CRLMODULE_NAME,</span><br><span class="line">.pm = &amp;crlmodule_pm_ops,</span><br><span class="line">&#125;,</span><br><span class="line">.probe= crlmodule_probe,</span><br><span class="line">.remove= crlmodule_remove,</span><br><span class="line">.id_table = crlmodule_id_table,</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">crlmodule_runtime_resume</span><span class="params">(struct device *dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">client</span> = <span class="title">to_i2c_client</span>(<span class="title">dev</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">v4l2_subdev</span> *<span class="title">sd</span> = <span class="title">i2c_get_clientdata</span>(<span class="title">client</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">crl_sensor</span> *<span class="title">sensor</span> = <span class="title">to_crlmodule_sensor</span>(<span class="title">sd</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> __crlmodule_powerup_sequence(sensor);</span><br><span class="line"><span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; sensor-&gt;sensor_ds-&gt;power_items; idx++) &#123;</span><br><span class="line">entity = &amp;sensor-&gt;pwr_entity[idx];</span><br><span class="line"><span class="keyword">switch</span> (entity-&gt;type) &#123;</span><br><span class="line"><span class="keyword">case</span> CRL_POWER_ETY_GPIO_FROM_PDATA:</span><br><span class="line">gpio_set_value(sensor-&gt;platform_data-&gt;xshutdown,</span><br><span class="line">entity-&gt;val);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;register&quot;&gt;&lt;a href=&quot;#register&quot; class=&quot;headerlink&quot; title=&quot;register&quot;&gt;&lt;/a&gt;register&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;crl_power_seq_entity&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ds90ub940_power_items&lt;/span&gt;[] = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		.val = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		.undo_val = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// Keep xshutdown HIGH all the time. (normally is 0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;crl_sensor_configuration&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ds90ub940_crl_configuration&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.power_items = ARRAY_SIZE(ds90ub940_power_items),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.power_entities = ds90ub940_power_items,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;crlmodule_sensors&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;supported_sensors&lt;/span&gt;[] = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;DS90UB940-1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;ds90ub940&quot;&lt;/span&gt;, &amp;amp;ds90ub940_crl_configuration &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="intel" scheme="http://yoursite.com/categories/Linux/intel/"/>
    
      <category term="crl" scheme="http://yoursite.com/categories/Linux/intel/crl/"/>
    
    
  </entry>
  
  <entry>
    <title>pdata注册i2c_client</title>
    <link href="http://yoursite.com/2018/06/04/Linux/intel/crl/pdata%E6%B3%A8%E5%86%8Ci2c_client/"/>
    <id>http://yoursite.com/2018/06/04/Linux/intel/crl/pdata注册i2c_client/</id>
    <published>2018-06-04T02:17:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pdata"><a href="#pdata" class="headerlink" title="pdata"></a>pdata</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">intel_ipu4_isys_subdev_info</span> <span class="title">ds90ub940_crl_sd_1</span> = &#123;</span></span><br><span class="line">.csi2 = &amp;ds90ub940_csi2_cfg_1,</span><br><span class="line">.i2c = &#123;</span><br><span class="line">.board_info = &#123;</span><br><span class="line">I2C_BOARD_INFO(CRLMODULE_NAME, <span class="number">0x2c</span>),</span><br><span class="line">.platform_data = &amp;ds90ub940_pdata_1,</span><br><span class="line">&#125;,</span><br><span class="line">.i2c_adapter_id = <span class="number">5</span>,<span class="comment">// FIXME</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="register-i2c-client"><a href="#register-i2c-client" class="headerlink" title="register i2c_client"></a>register i2c_client</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">isys_register_ext_subdev</span><span class="params">(struct intel_ipu4_isys *isys,</span></span></span><br><span class="line"><span class="function"><span class="params">struct intel_ipu4_isys_subdev_info *sd_info,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">bool</span> acpi_only)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_adapter</span> *<span class="title">adapter</span> = <span class="title">i2c_get_adapter</span>(<span class="title">sd_info</span>-&gt;<span class="title">i2c</span>.<span class="title">i2c_adapter_id</span>);</span><span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">client = isys_find_i2c_subdev(adapter, sd_info);<span class="comment">// 默认client为NULL</span></span><br><span class="line"><span class="keyword">if</span> (!client) &#123;</span><br><span class="line">sd = v4l2_i2c_new_subdev_board(&amp;isys-&gt;v4l2_dev, adapter,</span><br><span class="line">       &amp;sd_info-&gt;i2c.board_info, <span class="number">0</span>);</span><br><span class="line">client = i2c_new_device(adapter, info);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pdata&quot;&gt;&lt;a href=&quot;#pdata&quot; class=&quot;headerlink&quot; title=&quot;pdata&quot;&gt;&lt;/a&gt;pdata&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;intel_ipu4_isys_subdev_info&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ds90ub940_crl_sd_1&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.csi2 = &amp;amp;ds90ub940_csi2_cfg_1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.i2c = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		.board_info = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			I2C_BOARD_INFO(CRLMODULE_NAME, &lt;span class=&quot;number&quot;&gt;0x2c&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			.platform_data = &amp;amp;ds90ub940_pdata_1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		.i2c_adapter_id = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,	&lt;span class=&quot;comment&quot;&gt;// FIXME&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="intel" scheme="http://yoursite.com/categories/Linux/intel/"/>
    
      <category term="crl" scheme="http://yoursite.com/categories/Linux/intel/crl/"/>
    
    
  </entry>
  
  <entry>
    <title>pdata和isys的联系(一)</title>
    <link href="http://yoursite.com/2018/06/01/Linux/intel/crl/pdata%E5%92%8Cisys%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%80/"/>
    <id>http://yoursite.com/2018/06/01/Linux/intel/crl/pdata和isys的联系一/</id>
    <published>2018-06-01T10:00:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pci-device"><a href="#pci-device" class="headerlink" title="pci_device"></a>pci_device</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ipu4_quirk</span><span class="params">(struct pci_dev *pci_dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pci_dev-&gt;dev.platform_data = &amp;pdata;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_INTEL, INTEL_IPU4_HW_BXT_P,</span><br><span class="line">ipu4_quirk);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="pci-driver"><a href="#pci-driver" class="headerlink" title="pci_driver"></a>pci_driver</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">pci_device_id</span> <span class="title">intel_ipu4_pci_tbl</span>[] = &#123;</span></span><br><span class="line">&#123;PCI_DEVICE(PCI_VENDOR_ID_INTEL, INTEL_IPU4_HW_BXT_B0)&#125;,</span><br><span class="line">&#123;PCI_DEVICE(PCI_VENDOR_ID_INTEL, INTEL_IPU4_HW_BXT_P)&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">pci_driver</span> <span class="title">intel_ipu4_pci_driver</span> = &#123;</span></span><br><span class="line">.name = INTEL_IPU4_NAME,</span><br><span class="line">.id_table = intel_ipu4_pci_tbl,</span><br><span class="line">.probe = intel_ipu4_pci_probe,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><p>通过<strong>PCI_VENDOR_ID_INTEL, INTEL_IPU4_HW_BXT_P</strong>来进行match，match成功的话会调用ipu4_quirk以及intel_ipu4_pci_probe</p><h2 id="intel-ipu4-pci-probe"><a href="#intel-ipu4-pci-probe" class="headerlink" title="intel_ipu4_pci_probe"></a>intel_ipu4_pci_probe</h2><h3 id="intel-ipu4-bus-device"><a href="#intel-ipu4-bus-device" class="headerlink" title="intel_ipu4_bus_device"></a>intel_ipu4_bus_device</h3><p>注册了name = INTEL_IPU4_ISYS_NAME的device<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">intel_ipu4_pci_probe</span><span class="params">(struct pci_dev *pdev,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> struct pci_device_id *id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">isp-&gt;isys = intel_ipu4_isys_init(</span><br><span class="line">pdev, &amp;isp-&gt;isys_iommu-&gt;dev, &amp;isp-&gt;isys_iommu-&gt;dev,</span><br><span class="line">isys_base, isys_ipdata,</span><br><span class="line">pdev-&gt;dev.platform_data,</span><br><span class="line"><span class="number">0</span>, is_intel_ipu_hw_fpga(isp) ?</span><br><span class="line">INTEL_IPU4_ISYS_TYPE_INTEL_IPU4_FPGA :</span><br><span class="line">INTEL_IPU4_ISYS_TYPE_INTEL_IPU4);</span><br><span class="line"><span class="keyword">return</span> intel_ipu4_bus_add_device(pdev, parent, pdata, iommu, <span class="literal">NULL</span>,</span><br><span class="line"> INTEL_IPU4_ISYS_NAME, nr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="intel-ipu4-bus-driver"><a href="#intel-ipu4-bus-driver" class="headerlink" title="intel_ipu4_bus_driver"></a>intel_ipu4_bus_driver</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">intel_ipu4_bus_driver</span> <span class="title">isys_driver</span> = &#123;</span></span><br><span class="line">.probe = isys_probe,</span><br><span class="line">.wanted = INTEL_IPU4_ISYS_NAME,</span><br><span class="line">.drv = &#123;</span><br><span class="line">.name = INTEL_IPU4_ISYS_NAME,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>INTEL_IPU4_ISYS_NAME</strong>匹配调用<strong>isys_probe</strong></p><p><strong>即pdata和isys_probe将会有一定的联系</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pci-device&quot;&gt;&lt;a href=&quot;#pci-device&quot; class=&quot;headerlink&quot; title=&quot;pci_device&quot;&gt;&lt;/a&gt;pci_device&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ipu4_quirk&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(struct pci_dev *pci_dev)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pci_dev-&amp;gt;dev.platform_data = &amp;amp;pdata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_INTEL, INTEL_IPU4_HW_BXT_P,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ipu4_quirk);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="intel" scheme="http://yoursite.com/categories/Linux/intel/"/>
    
      <category term="crl" scheme="http://yoursite.com/categories/Linux/intel/crl/"/>
    
    
  </entry>
  
  <entry>
    <title>pdata和isys的联系(二)</title>
    <link href="http://yoursite.com/2018/06/01/Linux/intel/crl/pdata%E5%92%8Cisys%E7%9A%84%E8%81%94%E7%B3%BB%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/06/01/Linux/intel/crl/pdata和isys的联系二/</id>
    <published>2018-06-01T10:00:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pdev-gt-dev-platform-data"><a href="#pdev-gt-dev-platform-data" class="headerlink" title="pdev-&gt;dev.platform_data"></a>pdev-&gt;dev.platform_data</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">intel_ipu4_isys_subdev_pdata</span> <span class="title">pdata</span> = &#123;</span></span><br><span class="line">.subdevs = (struct intel_ipu4_isys_subdev_info *[]) &#123;</span><br><span class="line">&amp;ov13858_crl_sd,</span><br><span class="line">...</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ipu4_quirk</span><span class="params">(struct pci_dev *pci_dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pci_dev-&gt;dev.platform_data = &amp;pdata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="pdata-gt-spdata"><a href="#pdata-gt-spdata" class="headerlink" title="pdata-&gt;spdata"></a>pdata-&gt;spdata</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">intel_ipu4_pci_probe</span><span class="params">(struct pci_dev *pdev,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> struct pci_device_id *id)</span></span></span><br><span class="line">isp-&gt;isys = intel_ipu4_isys_init(</span><br><span class="line">pdev, &amp;isp-&gt;isys_iommu-&gt;dev, &amp;isp-&gt;isys_iommu-&gt;dev,</span><br><span class="line">isys_base, isys_ipdata,</span><br><span class="line">pdev-&gt;dev.platform_data,<span class="comment">// FIXME</span></span><br><span class="line"><span class="number">0</span>, is_intel_ipu_hw_fpga(isp) ?</span><br><span class="line">INTEL_IPU4_ISYS_TYPE_INTEL_IPU4_FPGA :</span><br><span class="line">INTEL_IPU4_ISYS_TYPE_INTEL_IPU4);</span><br><span class="line">pdata-&gt;spdata = spdata;<span class="comment">// FIXME</span></span><br><span class="line"><span class="keyword">return</span> intel_ipu4_bus_add_device(pdev, parent, pdata, iommu, <span class="literal">NULL</span>,</span><br><span class="line"> INTEL_IPU4_ISYS_NAME, nr);</span><br><span class="line">adev = kzalloc(<span class="keyword">sizeof</span>(*adev), GFP_KERNEL);</span><br><span class="line">adev-&gt;pdata = pdata;<span class="comment">// FIXME</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">isys_probe</span><span class="params">(struct intel_ipu4_bus_device *adev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">isys-&gt;pdata = adev-&gt;pdata;</span><br><span class="line"></span><br><span class="line">rval = isys_register_devices(isys);</span><br><span class="line">isys_register_ext_subdevs(isys);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">intel_ipu4_isys_subdev_pdata</span> *<span class="title">spdata</span> = <span class="title">isys</span>-&gt;<span class="title">pdata</span>-&gt;<span class="title">spdata</span>;</span><span class="comment">// FIXME</span></span><br><span class="line"><span class="keyword">for</span> (sd_info = spdata-&gt;subdevs; *sd_info; sd_info++)</span><br><span class="line">isys_register_ext_subdev(isys, *sd_info, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以sd_info就指向了ov13858_crl_sd，将依次遍历pdata-&gt;subdevs。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pdev-gt-dev-platform-data&quot;&gt;&lt;a href=&quot;#pdev-gt-dev-platform-data&quot; class=&quot;headerlink&quot; title=&quot;pdev-&amp;gt;dev.platform_data&quot;&gt;&lt;/a&gt;pdev-&amp;gt;dev.platform_data&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;intel_ipu4_isys_subdev_pdata&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pdata&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subdevs = (struct intel_ipu4_isys_subdev_info *[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;amp;ov13858_crl_sd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ipu4_quirk&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(struct pci_dev *pci_dev)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pci_dev-&amp;gt;dev.platform_data = &amp;amp;pdata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="intel" scheme="http://yoursite.com/categories/Linux/intel/"/>
    
      <category term="crl" scheme="http://yoursite.com/categories/Linux/intel/crl/"/>
    
    
  </entry>
  
  <entry>
    <title>保存.config</title>
    <link href="http://yoursite.com/2018/05/24/Linux/compile/save_config/"/>
    <id>http://yoursite.com/2018/05/24/Linux/compile/save_config/</id>
    <published>2018-05-24T03:33:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>$ make savedefconfig &amp;&amp; mv defconfig arch/arm/configs/xxx_defconfig</p></blockquote><p><a href="https://blog.csdn.net/kangear/article/details/39553337" target="_blank" rel="noopener">正确地保存编译内核产生的.config文件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;$ make savedefconfig &amp;amp;&amp;amp; mv defconfig arch/arm/configs/xxx_defconfig&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="compile" scheme="http://yoursite.com/categories/Linux/compile/"/>
    
    
  </entry>
  
  <entry>
    <title>crl match</title>
    <link href="http://yoursite.com/2018/05/21/Linux/intel/crl/match/"/>
    <id>http://yoursite.com/2018/05/21/Linux/intel/crl/match/</id>
    <published>2018-05-21T03:15:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="匹配成功log"><a href="#匹配成功log" class="headerlink" title="匹配成功log"></a>匹配成功log</h1><blockquote><p>$ dmesg<br>[x.xxxxx] crlmodule 2-000E: crlmodule_populate_ds xxx selected<br>2-000E: [adapter bus id]-[i2c addr]</p></blockquote><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><ol><li>需要注册一个名字为CRLMODULE_NAME的i2c_client，将会callback crlmodule_probe</li><li>添加到supported_sensors，和关键的CRL configuration file联系起来<a id="more"></a><h2 id="注册device"><a href="#注册device" class="headerlink" title="注册device"></a>注册device</h2>分两步<h3 id="Adding-a-sensor-device-to-a-Linux-Device-Tree"><a href="#Adding-a-sensor-device-to-a-Linux-Device-Tree" class="headerlink" title="Adding a sensor device to a Linux Device Tree"></a>Adding a sensor device to a Linux Device Tree</h3>其实只要配置好相应的宏，例如打开CONFIG_INTEL_IPU4_DS90UB940基本就能注册上该设备。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">crlmodule_platform_data</span> <span class="title">ds90ub940_pdata</span> = &#123;</span></span><br><span class="line">.xshutdown = <span class="number">1</span>,</span><br><span class="line">.lanes = DS90UB940_LANES,</span><br><span class="line">.ext_clk = <span class="number">24000000</span>,</span><br><span class="line">.op_sys_clock = (<span class="keyword">uint64_t</span> [])&#123;<span class="number">600000000</span>&#125;,</span><br><span class="line">.module_name = <span class="string">"DS90UB940"</span>,<span class="comment">// FIXME</span></span><br><span class="line">.id_string = <span class="string">"0x55 0x42 0x39 0x34 0x30"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">intel_ipu4_isys_subdev_info</span> <span class="title">ds90ub940_crl_sd</span> = &#123;</span></span><br><span class="line">.csi2 = &amp;ds90ub940_csi2_cfg,</span><br><span class="line">.i2c = &#123;</span><br><span class="line">.board_info = &#123;</span><br><span class="line">I2C_BOARD_INFO(CRLMODULE_NAME, DS90UB940_I2C_ADDRESS),<span class="comment">// FIXME，将会调用crlmodule_probe</span></span><br><span class="line">.platform_data = &amp;ds90ub940_pdata,</span><br><span class="line">&#125;,</span><br><span class="line">.i2c_adapter_id = <span class="number">9</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">intel_ipu4_isys_subdev_pdata</span> <span class="title">pdata</span> = &#123;</span></span><br><span class="line">.subdevs = (struct intel_ipu4_isys_subdev_info *[]) &#123;</span><br><span class="line">#ifdef CONFIG_INTEL_IPU4_DS90UB940</span><br><span class="line">&amp;ds90ub940_crl_sd,</span><br><span class="line">#endif</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Adding-the-new-sensor-configuration-file-to-the-CRL-framework"><a href="#Adding-the-new-sensor-configuration-file-to-the-CRL-framework" class="headerlink" title="Adding the new sensor configuration file to the CRL framework"></a>Adding the new sensor configuration file to the CRL framework</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">crlmodule_sensors</span> <span class="title">supported_sensors</span>[] = &#123;</span></span><br><span class="line">&#123; <span class="string">"DS90UB940"</span>, <span class="string">"ds90ub940"</span>, &amp;ds90ub940_crl_configuration &#125;,<span class="comment">// FIXME</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="driver"><a href="#driver" class="headerlink" title="driver"></a>driver</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">crlmodule_i2c_driver</span> = &#123;</span></span><br><span class="line">.driver= &#123;</span><br><span class="line">.name = CRLMODULE_NAME,</span><br><span class="line">.pm = &amp;crlmodule_pm_ops,</span><br><span class="line">&#125;,</span><br><span class="line">.probe= crlmodule_probe,</span><br><span class="line">.remove= crlmodule_remove,</span><br><span class="line">.id_table = crlmodule_id_table,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">crlmodule_probe</span><span class="params">(struct i2c_client *client,</span></span></span><br><span class="line"><span class="function"><span class="params">   <span class="keyword">const</span> struct i2c_device_id *devid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sensor-&gt;platform_data = client-&gt;dev.platform_data;</span><br><span class="line">ret = crlmodule_populate_ds(sensor, &amp;client-&gt;dev);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(supported_sensors); i++) &#123;</span><br><span class="line"><span class="comment">/* Check the ACPI supported modules */</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(dev_name(dev), supported_sensors[i].pname)) &#123;</span><br><span class="line">sensor-&gt;sensor_ds = supported_sensors[i].ds;</span><br><span class="line">dev_info(dev, <span class="string">"%s %s selected\n"</span>,</span><br><span class="line"> __func__, supported_sensors[i].name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check the non ACPI modules */</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(sensor-&gt;platform_data-&gt;module_name,</span><br><span class="line">supported_sensors[i].pname)) &#123;</span><br><span class="line">sensor-&gt;sensor_ds = supported_sensors[i].ds;</span><br><span class="line">dev_info(dev, <span class="string">"%s %s selected\n"</span>,</span><br><span class="line"> __func__, supported_sensors[i].name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="match有两种方式"><a href="#match有两种方式" class="headerlink" title="match有两种方式"></a>match有两种方式</h2><p>There are two ways for APL Yocto Linux to add your sensor into a Linux Device Tree:<br>• Define the ACPI configuration<br>• Define the sensor in the IPU4 Platform data module.</p><h1 id="ACPI-supported-modules"><a href="#ACPI-supported-modules" class="headerlink" title="ACPI supported modules"></a>ACPI supported modules</h1><blockquote><p>strcmp(dev_name(dev), supported_sensors[i].pname)</p></blockquote><p>即client-&gt;dev和supported_sensors[i].pname的对比</p><h1 id="non-ACPI-modules"><a href="#non-ACPI-modules" class="headerlink" title="non ACPI modules"></a>non ACPI modules</h1><blockquote><p>strcmp(sensor-&gt;platform_data-&gt;module_name, supported_sensors[i].pname)</p></blockquote><p>这个case使用这种方式，<br>即client-&gt;dev.platform_data-&gt;module_name(.module_name = “DS90UB940”,)和<br>supported_sensors[i].pname({ “DS90UB940”, “ds90ub940”, &amp;ds90ub940_crl_configuration },)的对比</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;匹配成功log&quot;&gt;&lt;a href=&quot;#匹配成功log&quot; class=&quot;headerlink&quot; title=&quot;匹配成功log&quot;&gt;&lt;/a&gt;匹配成功log&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;$ dmesg&lt;br&gt;[x.xxxxx] crlmodule 2-000E: crlmodule_populate_ds xxx selected&lt;br&gt;2-000E: [adapter bus id]-[i2c addr]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;代码分析&quot;&gt;&lt;a href=&quot;#代码分析&quot; class=&quot;headerlink&quot; title=&quot;代码分析&quot;&gt;&lt;/a&gt;代码分析&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;需要注册一个名字为CRLMODULE_NAME的i2c_client，将会callback crlmodule_probe&lt;/li&gt;
&lt;li&gt;添加到supported_sensors，和关键的CRL configuration file联系起来
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="intel" scheme="http://yoursite.com/categories/Linux/intel/"/>
    
      <category term="crl" scheme="http://yoursite.com/categories/Linux/intel/crl/"/>
    
    
  </entry>
  
  <entry>
    <title>CRL老的匹配方式</title>
    <link href="http://yoursite.com/2018/05/21/Linux/intel/crl/old_match_method/"/>
    <id>http://yoursite.com/2018/05/21/Linux/intel/crl/old_match_method/</id>
    <published>2018-05-21T03:11:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<p>这种方式可能是CRL老的匹配方式，通过读取id寄存器的方式来进行匹配，先记录下</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>通过读取id寄存器对比进行match，这个case中是读取0xF0-0xF5，看读回来的值是不是和默认值一致<br><img src="match.png" alt="ID"><br><a id="more"></a></p><h2 id="设置ID寄存器"><a href="#设置ID寄存器" class="headerlink" title="设置ID寄存器"></a>设置ID寄存器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">crl_sensor_detect_config</span> <span class="title">ds90ub940_sensor_detect_regset</span>[] = &#123;</span></span><br><span class="line"><span class="comment">/* UB940 */</span></span><br><span class="line">&#123;</span><br><span class="line">.reg = &#123; <span class="number">0xF1</span>, CRL_REG_LEN_08BIT, <span class="number">0xFF</span> &#125;,</span><br><span class="line">.width = <span class="number">5</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">.reg = &#123; <span class="number">0xF2</span>, CRL_REG_LEN_08BIT, <span class="number">0xFF</span> &#125;,</span><br><span class="line">.width = <span class="number">5</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">.reg = &#123; <span class="number">0xF3</span>, CRL_REG_LEN_08BIT, <span class="number">0xFF</span> &#125;,</span><br><span class="line">.width = <span class="number">5</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">.reg = &#123; <span class="number">0xF4</span>, CRL_REG_LEN_08BIT, <span class="number">0xFF</span> &#125;,</span><br><span class="line">.width = <span class="number">5</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">.reg = &#123; <span class="number">0xF5</span>, CRL_REG_LEN_08BIT, <span class="number">0xFF</span> &#125;,</span><br><span class="line">.width = <span class="number">5</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">crl_sensor_configuration</span> <span class="title">ds90ub940_crl_configuration</span> = &#123;</span></span><br><span class="line">.id_reg_items = ARRAY_SIZE(ds90ub940_sensor_detect_regset),</span><br><span class="line">.id_regs = ds90ub940_sensor_detect_regset,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="设置ID寄存器默认值"><a href="#设置ID寄存器默认值" class="headerlink" title="设置ID寄存器默认值"></a>设置ID寄存器默认值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">crlmodule_platform_data</span> <span class="title">ds90ub940_pdata</span> = &#123;</span></span><br><span class="line">.xshutdown = <span class="number">1</span>,</span><br><span class="line">.lanes = DS90UB940_LANES,</span><br><span class="line">.ext_clk = <span class="number">24000000</span>,</span><br><span class="line">.op_sys_clock = (<span class="keyword">uint64_t</span> [])&#123;<span class="number">600000000</span>&#125;,</span><br><span class="line">.module_name = <span class="string">"DS90UB940"</span>,</span><br><span class="line">.id_string = <span class="string">"0x55 0x42 0x39 0x34 0x30"</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="match代码分析"><a href="#match代码分析" class="headerlink" title="match代码分析"></a>match代码分析</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">crlmodule_registered</span><span class="params">(struct v4l2_subdev *subdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rval = crlmodule_identify_module(subdev);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sensor-&gt;sensor_ds-&gt;id_reg_items; i++)</span><br><span class="line">size += sensor-&gt;sensor_ds-&gt;id_regs[i].width + <span class="number">1</span>;<span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ID寄存器默认值</span></span><br><span class="line">expect_id = sensor-&gt;platform_data-&gt;id_string;<span class="comment">// "0x55 0x42 0x39 0x34 0x30"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取ds90ub940_sensor_detect_regset配置的id寄存器</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sensor-&gt;sensor_ds-&gt;id_reg_items; i++) &#123;</span><br><span class="line"><span class="comment">// 通过i2c来进行读取</span></span><br><span class="line">ret = crlmodule_read_reg(sensor,</span><br><span class="line"> sensor-&gt;sensor_ds-&gt;id_regs[i].reg,</span><br><span class="line"> &amp;val);</span><br><span class="line">crlmodule_i2c_read(sensor, reg.dev_i2c_addr, reg.address,</span><br><span class="line">  reg.len, val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i)</span><br><span class="line">pos += <span class="built_in">snprintf</span>(id_string + pos, size - pos, <span class="string">" 0x%x"</span>, val);<span class="comment">// 0x55 0x42 ...</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pos = <span class="built_in">snprintf</span>(id_string, size, <span class="string">"0x%x"</span>, val);<span class="comment">// 第一次是0x55</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// match</span></span><br><span class="line"><span class="keyword">if</span> (expect_id &amp;&amp;</span><br><span class="line">   (strnlen(id_string, size) != strnlen(expect_id, size + <span class="number">1</span>) ||</span><br><span class="line"><span class="built_in">strncmp</span>(id_string, expect_id, size))) &#123;</span><br><span class="line">dev_err(&amp;client-&gt;dev,</span><br><span class="line"><span class="string">"Sensor detection failed: expect \"%s\" actual \"%s\""</span>,</span><br><span class="line">expect_id, id_string);</span><br><span class="line">ret = -ENODEV;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这种方式可能是CRL老的匹配方式，通过读取id寄存器的方式来进行匹配，先记录下&lt;/p&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;p&gt;通过读取id寄存器对比进行match，这个case中是读取0xF0-0xF5，看读回来的值是不是和默认值一致&lt;br&gt;&lt;img src=&quot;match.png&quot; alt=&quot;ID&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="intel" scheme="http://yoursite.com/categories/Linux/intel/"/>
    
      <category term="crl" scheme="http://yoursite.com/categories/Linux/intel/crl/"/>
    
    
  </entry>
  
  <entry>
    <title>tiny4412_tp</title>
    <link href="http://yoursite.com/2018/05/16/Linux/input/tiny4412_tp/"/>
    <id>http://yoursite.com/2018/05/16/Linux/input/tiny4412_tp/</id>
    <published>2018-05-16T10:15:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多点触摸协议"><a href="#多点触摸协议" class="headerlink" title="多点触摸协议"></a>多点触摸协议</h1><p>多点触摸报点，需要知道当前点属于之前的哪一条线<br>硬件支持识别，则设置<strong>ABS_MT_TRACKING_ID</strong>属性。<br>硬件不支持，则framework层会计算前一次5个点与本次5个点的距离来进行推算<br>参考：<a href="https://blog.csdn.net/fantasyhujian/article/details/12192761?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">A/B(Slot)协议</a><br><a id="more"></a></p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ft5x0x_ts_probe</span><span class="params">(struct i2c_client *client, <span class="keyword">const</span> struct i2c_device_id *id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * part 1：input device</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">input_dev = input_allocate_device();</span><br><span class="line"></span><br><span class="line">set_bit(EV_SYN, input_dev-&gt;evbit);</span><br><span class="line">set_bit(EV_ABS, input_dev-&gt;evbit);</span><br><span class="line">set_bit(EV_KEY, input_dev-&gt;evbit);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多点触摸：B协议</span></span><br><span class="line">set_bit(ABS_MT_TRACKING_ID, input_dev-&gt;absbit);</span><br><span class="line">set_bit(ABS_MT_TOUCH_MAJOR, input_dev-&gt;absbit);</span><br><span class="line">set_bit(ABS_MT_WIDTH_MAJOR, input_dev-&gt;absbit);</span><br><span class="line">set_bit(ABS_MT_POSITION_X, input_dev-&gt;absbit);</span><br><span class="line">set_bit(ABS_MT_POSITION_Y, input_dev-&gt;absbit);</span><br><span class="line"></span><br><span class="line">input_set_abs_params(input_dev, ABS_MT_POSITION_X, <span class="number">0</span>, ts-&gt;screen_max_x, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">input_set_abs_params(input_dev, ABS_MT_POSITION_Y, <span class="number">0</span>, ts-&gt;screen_max_y, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, <span class="number">0</span>, ts-&gt;pressure_max, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">input_set_abs_params(input_dev, ABS_MT_WIDTH_MAJOR, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">input_set_abs_params(input_dev, ABS_MT_TRACKING_ID, <span class="number">0</span>, FT5X0X_PT_MAX, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">// 最多支持5点触摸</span></span><br><span class="line"></span><br><span class="line">input_register_device(input_dev);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> part 2：irq</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">INIT_WORK(&amp;ts-&gt;work, ft5x0x_ts_pen_irq_work);</span><br><span class="line">request_irq(client-&gt;irq, ft5x0x_ts_interrupt,</span><br><span class="line">IRQ_TYPE_EDGE_FALLING <span class="comment">/*IRQF_TRIGGER_FALLING*/</span>, <span class="string">"ft5x0x_ts"</span>, ts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ISR中启动queue-work"><a href="#ISR中启动queue-work" class="headerlink" title="ISR中启动queue_work"></a>ISR中启动queue_work</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> irqreturn_t <span class="title">ft5x0x_ts_interrupt</span><span class="params">(<span class="keyword">int</span> irq, <span class="keyword">void</span> *dev_id)</span> </span>&#123;</span><br><span class="line">queue_work(ts-&gt;<span class="built_in">queue</span>, &amp;ts-&gt;work);<span class="comment">// 启动工作队列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ft5x0x_ts_pen_irq_work</span><span class="params">(struct work_struct *work)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 先读取再上报</span></span><br><span class="line"><span class="keyword">if</span> (!ft5x0x_read_data(ts)) &#123;</span><br><span class="line">ft5x0x_ts_report(ts);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取和上报坐标"><a href="#读取和上报坐标" class="headerlink" title="读取和上报坐标"></a>读取和上报坐标</h2><p>读取数据，多点的话则一起收集<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ft5x0x_read_data</span><span class="params">(struct ft5x0x_ts_data *ts)</span> </span>&#123;</span><br><span class="line">ft5x0x_i2c_rxdata(buf, <span class="number">31</span>);</span><br><span class="line">event-&gt;touch_point = buf[<span class="number">2</span>] &amp; <span class="number">0x07</span>;</span><br><span class="line"><span class="keyword">switch</span> (event-&gt;touch_point) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">event-&gt;x[<span class="number">4</span>] = (s16)(buf[<span class="number">0x1b</span>] &amp; <span class="number">0x0F</span>)&lt;&lt;<span class="number">8</span> | (s16)buf[<span class="number">0x1c</span>];</span><br><span class="line">event-&gt;y[<span class="number">4</span>] = (s16)(buf[<span class="number">0x1d</span>] &amp; <span class="number">0x0F</span>)&lt;&lt;<span class="number">8</span> | (s16)buf[<span class="number">0x1e</span>];</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">event-&gt;x[<span class="number">3</span>] = (s16)(buf[<span class="number">0x15</span>] &amp; <span class="number">0x0F</span>)&lt;&lt;<span class="number">8</span> | (s16)buf[<span class="number">0x16</span>];</span><br><span class="line">event-&gt;y[<span class="number">3</span>] = (s16)(buf[<span class="number">0x17</span>] &amp; <span class="number">0x0F</span>)&lt;&lt;<span class="number">8</span> | (s16)buf[<span class="number">0x18</span>];</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">event-&gt;x[<span class="number">2</span>] = (s16)(buf[<span class="number">0x0f</span>] &amp; <span class="number">0x0F</span>)&lt;&lt;<span class="number">8</span> | (s16)buf[<span class="number">0x10</span>];</span><br><span class="line">event-&gt;y[<span class="number">2</span>] = (s16)(buf[<span class="number">0x11</span>] &amp; <span class="number">0x0F</span>)&lt;&lt;<span class="number">8</span> | (s16)buf[<span class="number">0x12</span>];</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">event-&gt;x[<span class="number">1</span>] = (s16)(buf[<span class="number">0x09</span>] &amp; <span class="number">0x0F</span>)&lt;&lt;<span class="number">8</span> | (s16)buf[<span class="number">0x0a</span>];</span><br><span class="line">event-&gt;y[<span class="number">1</span>] = (s16)(buf[<span class="number">0x0b</span>] &amp; <span class="number">0x0F</span>)&lt;&lt;<span class="number">8</span> | (s16)buf[<span class="number">0x0c</span>];</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">event-&gt;x[<span class="number">0</span>] = (s16)(buf[<span class="number">0x03</span>] &amp; <span class="number">0x0F</span>)&lt;&lt;<span class="number">8</span> | (s16)buf[<span class="number">0x04</span>];</span><br><span class="line">event-&gt;y[<span class="number">0</span>] = (s16)(buf[<span class="number">0x05</span>] &amp; <span class="number">0x0F</span>)&lt;&lt;<span class="number">8</span> | (s16)buf[<span class="number">0x06</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上报数据<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ft5x0x_ts_report</span><span class="params">(struct ft5x0x_ts_data *ts)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; event-&gt;touch_point; i++) &#123;</span><br><span class="line">x = event-&gt;x[i];</span><br><span class="line">y = event-&gt;y[i];</span><br><span class="line"></span><br><span class="line">input_report_abs(ts-&gt;input_dev, ABS_MT_POSITION_X, x);</span><br><span class="line">input_report_abs(ts-&gt;input_dev, ABS_MT_POSITION_Y, y);</span><br><span class="line"></span><br><span class="line">input_report_abs(ts-&gt;input_dev, ABS_MT_PRESSURE, event-&gt;pressure);</span><br><span class="line">input_report_abs(ts-&gt;input_dev, ABS_MT_TOUCH_MAJOR, event-&gt;pressure);</span><br><span class="line">input_report_abs(ts-&gt;input_dev, ABS_MT_TRACKING_ID, i);<span class="comment">// 追踪id</span></span><br><span class="line"></span><br><span class="line">input_mt_sync(ts-&gt;input_dev);</span><br><span class="line">&#125;</span><br><span class="line">input_report_key(ts-&gt;input_dev, BTN_TOUCH, <span class="number">1</span>);</span><br><span class="line">input_sync(ts-&gt;input_dev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多点触摸协议&quot;&gt;&lt;a href=&quot;#多点触摸协议&quot; class=&quot;headerlink&quot; title=&quot;多点触摸协议&quot;&gt;&lt;/a&gt;多点触摸协议&lt;/h1&gt;&lt;p&gt;多点触摸报点，需要知道当前点属于之前的哪一条线&lt;br&gt;硬件支持识别，则设置&lt;strong&gt;ABS_MT_TRACKING_ID&lt;/strong&gt;属性。&lt;br&gt;硬件不支持，则framework层会计算前一次5个点与本次5个点的距离来进行推算&lt;br&gt;参考：&lt;a href=&quot;https://blog.csdn.net/fantasyhujian/article/details/12192761?utm_source=tuicool&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A/B(Slot)协议&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="input" scheme="http://yoursite.com/categories/Linux/input/"/>
    
    
  </entry>
  
  <entry>
    <title>nor_flash错位连接</title>
    <link href="http://yoursite.com/2018/05/16/Linux/flash/nor_flash%E9%94%99%E4%BD%8D%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2018/05/16/Linux/flash/nor_flash错位连接/</id>
    <published>2018-05-16T06:43:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="硬件错位连接"><a href="#硬件错位连接" class="headerlink" title="硬件错位连接"></a>硬件错位连接</h1><p>从这个图中可以看到nor flash的A0连接的是LADDR1，是一个错位的连接。<br><img src="nor_flash.png" alt="nor flash硬件连接"><br><a id="more"></a></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>假如ARM处理器外部扩展的是16 bit的NOR FLASH, 地址线必须要错位连接，8 bit则不需要。<br>ARM处理器的数据信号D0-D15和FLASH的数据信号D0-D15是逐一对应的。而ARM处理器的地址信号和NOR FLASH的地址信号是错位连接的，ARM的A0悬空，ARM的A1连接FLASH的A0，ARM的A2连接FLASH的A1，依次类推。<br>需要错位连接的原因是:</p><blockquote><p>ARM处理器的每个地址对应的是一个BYTE的数据单元，而16-BIT的FLASH的每个地址对应的是一个HALF-WORD(16-BIT)的数据单元。为了保持匹配,所以必须错位连接。这样，从ARM处理器发送出来的地址信号的最低位A0对16-BIT FLASH来说就被屏蔽掉了。</p></blockquote><p><strong>实际上原因是因为soc是以8 bit为单位，而nor flash是以16 bit为单位，所以需要硬件错位连接</strong></p><h1 id="读取例子"><a href="#读取例子" class="headerlink" title="读取例子"></a>读取例子</h1><ol><li><p>ARM处理器需要从地址0x0读取一个BYTE<br> ARM处理器在地址线An-A0上送出信号0x0;<br> 16-BIT FLASH在自己的地址信号An-A0上看到的地址是0x0,然后将地址0x0对应的16-BIT数据单元输出到D15-D0上;<br> ARM处理器知道访问的是16-BIT的FLASH,从D7-D0上读取所需要的一个BYTE的数据.</p></li><li><p>ARM处理器需要从地址0x1读取一个BYTE<br> ARM处理器在地址线An-A0上送出信号0x1;<br> 16-BIT FLASH在自己的地址信号An-A0上看到的地址<strong>依然是0x0</strong>, 然后将地址0x0对应的16-BIT数据单元输出到D15-D0上;<br> ARM处理器知道访问的是16-BIT的FLASH,从D15-D8 上读取所需要的一个BYTE 的数据.</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;硬件错位连接&quot;&gt;&lt;a href=&quot;#硬件错位连接&quot; class=&quot;headerlink&quot; title=&quot;硬件错位连接&quot;&gt;&lt;/a&gt;硬件错位连接&lt;/h1&gt;&lt;p&gt;从这个图中可以看到nor flash的A0连接的是LADDR1，是一个错位的连接。&lt;br&gt;&lt;img src=&quot;nor_flash.png&quot; alt=&quot;nor flash硬件连接&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="flash" scheme="http://yoursite.com/categories/Linux/flash/"/>
    
    
  </entry>
  
  <entry>
    <title>nor_nand区别</title>
    <link href="http://yoursite.com/2018/05/16/Linux/flash/nor_nand%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/05/16/Linux/flash/nor_nand区别/</id>
    <published>2018-05-16T03:13:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h1><h2 id="先擦除后写"><a href="#先擦除后写" class="headerlink" title="先擦除后写"></a>先擦除后写</h2><p>Flash编程原理都是只能将1写为0，而不能将0写成1.<br>所以在Flash编程之前，必须将对应的部分擦除，而擦除的过程就是将所有位都写为1的过程，块内的所有字节变为0xFF.<br>即，编程是将相应位写0的过程，而擦除是将相应位写1的过程，两者的执行过程完全相反.<br><strong>只不过NORFlash芯片只用擦写一个字，而NAND以块的方式进行擦除，以页的方式进行读写。</strong><br>但是nand的擦除和写速度远远超过nor flash。<br><a id="more"></a></p><h1 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h1><h2 id="引脚"><a href="#引脚" class="headerlink" title="引脚"></a>引脚</h2><p><img src="nand_flash.png" alt="nand引脚图"><br><img src="nor_flash.png" alt="nor引脚图"></p><ol><li><p>nor flash：<br> 有完整的地址线和数据线，所以nor flash允许访问随机存取存储器上的任何区域，而且可以从引脚图中计算出片子的容量。<br> 例如上图，地址线22根，数据线16根，则容量为：2^22 * 16bit /1024/1024 = 8M，所以不同容量的nor flash引脚必然不同。</p></li><li><p>nand flash：<br> nand flash只有一组数据线，不同容量的nand flash引脚基本一致，只需要在驱动中修改则可以兼容不同容量的flash。<br> 使用ale/cle来表明现数据线上传输的是数据/命令/地址：</p><blockquote><p>当CLE为高电平表示IO0-IO7传送的是命令；<br>当ALE为高电平表示IO0-IO7传送的是地址；<br>当ALE与CLE都为低电平的时候，表示IO0-IO7传送的是数据。</p></blockquote></li></ol><h2 id="片内执行"><a href="#片内执行" class="headerlink" title="片内执行"></a>片内执行</h2><p>NOR的特点是芯片内执行（XIP, eXecute In Place），这样应用程序可以直接在flash闪存内运行，不必再把代码读到系统RAM中。</p><p><strong>nor flash硬件兼容性能较差，容量较小，但是因为XIP的特性适合作为启动程序的存储介质。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;共同点&quot;&gt;&lt;a href=&quot;#共同点&quot; class=&quot;headerlink&quot; title=&quot;共同点&quot;&gt;&lt;/a&gt;共同点&lt;/h1&gt;&lt;h2 id=&quot;先擦除后写&quot;&gt;&lt;a href=&quot;#先擦除后写&quot; class=&quot;headerlink&quot; title=&quot;先擦除后写&quot;&gt;&lt;/a&gt;先擦除后写&lt;/h2&gt;&lt;p&gt;Flash编程原理都是只能将1写为0，而不能将0写成1.&lt;br&gt;所以在Flash编程之前，必须将对应的部分擦除，而擦除的过程就是将所有位都写为1的过程，块内的所有字节变为0xFF.&lt;br&gt;即，编程是将相应位写0的过程，而擦除是将相应位写1的过程，两者的执行过程完全相反.&lt;br&gt;&lt;strong&gt;只不过NORFlash芯片只用擦写一个字，而NAND以块的方式进行擦除，以页的方式进行读写。&lt;/strong&gt;&lt;br&gt;但是nand的擦除和写速度远远超过nor flash。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="flash" scheme="http://yoursite.com/categories/Linux/flash/"/>
    
    
  </entry>
  
  <entry>
    <title>中断不能睡眠</title>
    <link href="http://yoursite.com/2018/05/14/Linux/interrupt/%E4%B8%AD%E6%96%AD%E7%9D%A1%E7%9C%A0/"/>
    <id>http://yoursite.com/2018/05/14/Linux/interrupt/中断睡眠/</id>
    <published>2018-05-14T02:25:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<p>执行在中断上下文的代码：<br>a)中断的 top half (interrupt handler)<br>b)bottom half(softirq,tasklet等)</p><p>看了一些文章和讨论，如下：</p><blockquote><p>对于Linux 调度器，它的目标就是调度一个线程，一个线程就是调度实体。中断上下文没有专属的task struct，内核无从调度，中断上下文（hard irq和softirq context）并不参与调度，它们是异步事件的处理机制，目标就是尽快完成处理，返回现场。<br><a id="more"></a><br>但也有说：<br>其中一个比较流行的答案就是：中断没有进程上下文，如果睡眠之后，进程调度子系统没法来唤醒它。仔细想想，这个答案其实不然。在X86的实现上，中断发生时会借用当前被中断进程的Kernel stack，所以实际上中断是借宿在这个进程上，这个时候中断睡眠是完全可以（当然不合理）的。中断上下文会保存在这个进程的stack上，等到这个进程被唤醒时，会从中断ISR中继续执行。所以，这不是此问题的根本原因。</p></blockquote><p>但这个解释有个问题就是进程什么时候被唤醒，因为：</p><blockquote><p>如果中断睡眠，对被中断的进程不公。发生中断时，中断借用当前被中断的进程的Stack，但是此中断和此线程是毫无关系的。如果此时中断去睡眠，那么此被中断的进程不得不等待中断被继续调度执行。这样，此进程需要等待与他毫无关系的资源不确定的时间，这样设计系统不合理。</p></blockquote><p>其实实际上来讲，中断中睡眠技术上可能能做到，但是要考虑的东西太多而且意义不大，因为：<br><strong>中断服务程序应该尽快处理完中断，保证IO吞吐率以及响应的实时性，在中断程序中睡眠原本就违背中断程序本身的意义所在。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;执行在中断上下文的代码：&lt;br&gt;a)中断的 top half (interrupt handler)&lt;br&gt;b)bottom half(softirq,tasklet等)&lt;/p&gt;
&lt;p&gt;看了一些文章和讨论，如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于Linux 调度器，它的目标就是调度一个线程，一个线程就是调度实体。中断上下文没有专属的task struct，内核无从调度，中断上下文（hard irq和softirq context）并不参与调度，它们是异步事件的处理机制，目标就是尽快完成处理，返回现场。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="power" scheme="http://yoursite.com/categories/Linux/power/"/>
    
    
  </entry>
  
  <entry>
    <title>注册pcm设备</title>
    <link href="http://yoursite.com/2018/05/10/Linux/asoc/%E5%88%9B%E5%BB%BApcm%E8%AE%BE%E5%A4%87/"/>
    <id>http://yoursite.com/2018/05/10/Linux/asoc/创建pcm设备/</id>
    <published>2018-05-10T08:03:00.000Z</published>
    <updated>2018-11-12T06:49:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册pcm设备"><a href="#注册pcm设备" class="headerlink" title="注册pcm设备"></a>注册pcm设备</h1><p>先添加到链表card-&gt;devices，后续再统一callback ops.dev_register<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">snd_soc_instantiate_card</span><span class="params">(struct snd_soc_card *card)</span></span></span><br><span class="line"><span class="function">ret </span>= soc_probe_dai_link(card, i);</span><br><span class="line">ret = soc_new_pcm(rtd, num);</span><br><span class="line">ret = snd_pcm_new(rtd-&gt;card-&gt;snd_card, new_name,</span><br><span class="line">num, playback, capture, &amp;pcm);</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">snd_device_ops</span> <span class="title">ops</span> = &#123;</span></span><br><span class="line">.dev_free = snd_pcm_dev_free,</span><br><span class="line">.dev_register =snd_pcm_dev_register,</span><br><span class="line">.dev_disconnect = snd_pcm_dev_disconnect,</span><br><span class="line">&#125;;</span><br><span class="line">snd_device_new(card, SNDRV_DEV_PCM, pcm, &amp;ops);</span><br><span class="line">list_add(&amp;dev-&gt;<span class="built_in">list</span>, &amp;card-&gt;devices);</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>统一callback<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">snd_card_register</span><span class="params">(struct snd_card *card)</span></span></span><br><span class="line"><span class="function"><span class="title">snd_device_register_all</span><span class="params">(card)</span></span>;</span><br><span class="line">list_for_each_entry(dev, &amp;card-&gt;devices, <span class="built_in">list</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (dev-&gt;state == SNDRV_DEV_BUILD &amp;&amp; dev-&gt;ops-&gt;dev_register) &#123;</span><br><span class="line"><span class="keyword">if</span> ((err = dev-&gt;ops-&gt;dev_register(dev)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">dev-&gt;state = SNDRV_DEV_REGISTERED;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注册函数：注册pcm设备，需要关注snd_minors[minor](用于route fops用)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">snd_pcm_dev_register</span><span class="params">(struct snd_device *device)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (cidx = <span class="number">0</span>; cidx &lt; <span class="number">2</span>; cidx++) &#123;</span><br><span class="line"><span class="keyword">switch</span> (cidx) &#123;</span><br><span class="line"><span class="keyword">case</span> SNDRV_PCM_STREAM_PLAYBACK:</span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">"pcmC%iD%ip"</span>, pcm-&gt;card-&gt;number, pcm-&gt;device);</span><br><span class="line">devtype = SNDRV_DEVICE_TYPE_PCM_PLAYBACK;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SNDRV_PCM_STREAM_CAPTURE:</span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">"pcmC%iD%ic"</span>, pcm-&gt;card-&gt;number, pcm-&gt;device);</span><br><span class="line">devtype = SNDRV_DEVICE_TYPE_PCM_CAPTURE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">snd_register_device_for_dev(devtype, pcm-&gt;card,</span><br><span class="line">  pcm-&gt;device,</span><br><span class="line">  &amp;snd_pcm_f_ops[cidx],</span><br><span class="line">  pcm, str, dev);</span><br><span class="line">preg-&gt;f_ops = f_ops;</span><br><span class="line">minor = snd_kernel_minor(type, card, dev);</span><br><span class="line">snd_minors[minor] = preg;<span class="comment">// FIXME：route fops用</span></span><br><span class="line">preg-&gt;dev = device_create(sound_class, device, MKDEV(major, minor),</span><br><span class="line">private_data, <span class="string">"%s"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="route-fops"><a href="#route-fops" class="headerlink" title="route fops"></a>route fops</h1><p>通过minor次设备号来找到对应的fops，机理和misc_dev类似</p><ol><li><p> 所有的audio设备主设备号都是116</p><blockquote><p>crw-rw—T+  1 root audio 116,  6  5月  9 19:07 controlC0<br>crw-rw—T+  1 root audio 116,  4  5月  9 19:08 pcmC0D0c<br>crw-rw—T+  1 root audio 116,  3  5月 10 15:26 pcmC0D0p</p></blockquote><p> 使用register_chrdev注册设备，so访问任意的音频节点都是走同一个fops</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_SND_MAJOR116</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> major = CONFIG_SND_MAJOR;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">snd_fops</span> =</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">.owner =THIS_MODULE,</span><br><span class="line">.open =snd_open,</span><br><span class="line">.llseek =noop_llseek,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">alsa_sound_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">register_chrdev</span><span class="params">(major, <span class="string">"alsa"</span>, &amp;snd_fops)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p> 通过次设备号进行route</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">snd_open</span><span class="params">(struct inode *inode, struct file *file)</span></span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> minor </span>= iminor(inode);</span><br><span class="line">mptr = snd_minors[minor];<span class="comment">// snd_pcm_dev_register中设置了，这里使用</span></span><br><span class="line"></span><br><span class="line">file-&gt;f_op = fops_get(mptr-&gt;f_ops);<span class="comment">// 变更了fops</span></span><br><span class="line">file-&gt;f_op-&gt;open(inode, file);<span class="comment">// 调用次设备号对应fops的open</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注册pcm设备&quot;&gt;&lt;a href=&quot;#注册pcm设备&quot; class=&quot;headerlink&quot; title=&quot;注册pcm设备&quot;&gt;&lt;/a&gt;注册pcm设备&lt;/h1&gt;&lt;p&gt;先添加到链表card-&amp;gt;devices，后续再统一callback ops.dev_register&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snd_soc_instantiate_card&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(struct snd_soc_card *card)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;	ret &lt;/span&gt;= soc_probe_dai_link(card, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ret = soc_new_pcm(rtd, num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ret = snd_pcm_new(rtd-&amp;gt;card-&amp;gt;snd_card, new_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					num, playback, capture, &amp;amp;pcm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snd_device_ops&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ops&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					.dev_free = snd_pcm_dev_free,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					.dev_register =	snd_pcm_dev_register,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					.dev_disconnect = snd_pcm_dev_disconnect,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				snd_device_new(card, SNDRV_DEV_PCM, pcm, &amp;amp;ops);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					list_add(&amp;amp;dev-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;, &amp;amp;card-&amp;gt;devices);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="asoc" scheme="http://yoursite.com/categories/Linux/asoc/"/>
    
    
  </entry>
  
</feed>
